#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import logging
import os
import sys
import time
import signal
import aiohttp
from datetime import datetime
from typing import Dict, Optional
from collections import defaultdict

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import Conflict, NetworkError, TimedOut

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "8276621692:AAHo3hKkfTISwuzzVRJfWVFi3sSPMiINSo4")
MINECRAFT_API_URL = os.getenv("MINECRAFT_API_URL", "http://localhost:8080/api")
MINECRAFT_API_KEY = os.getenv("MINECRAFT_API_KEY", "default-secret-key")


class MinecraftApiClient:
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

    async def verify_code(self, code: str, telegram_id: int) -> dict:
        """–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ Minecraft API"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    "code": code,
                    "telegram_id": telegram_id
                }

                async with session.post(
                        f"{self.base_url}/verify",
                        headers=self.headers,
                        json=data,
                        timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    result = await response.json()
                    return {
                        "success": response.status == 200,
                        "data": result
                    }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {"success": False, "error": str(e)}

    async def get_linked_player(self, telegram_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                        f"{self.base_url}/links?telegram_id={telegram_id}",
                        headers=self.headers,
                        timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result.get("player_name")
                    return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
            return None

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                        f"{self.base_url}/health",
                        timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    return response.status == 200
        except:
            return False


class DataStorage:
    def __init__(self, data_file: str = "bot_data.json"):
        self.data_file = data_file
        self.links: Dict[int, str] = {}
        self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.links = {int(k): v for k, v in data.get('links', {}).items()}
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.links)} –ø—Ä–∏–≤—è–∑–æ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            data = {'links': {str(k): v for k, v in self.links.items()}}

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_locations = [
                self.data_file,
                os.path.expanduser(f"~/{self.data_file}"),
                f"/tmp/{self.data_file}"
            ]

            for location in save_locations:
                try:
                    temp_file = f"{location}.tmp"
                    with open(temp_file, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    os.replace(temp_file, location)

                    if location != self.data_file:
                        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {location}")
                        self.data_file = location
                    break
                except OSError:
                    continue
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
storage = DataStorage()
minecraft_api = MinecraftApiClient(MINECRAFT_API_URL, MINECRAFT_API_KEY)


# Rate limiting
class RateLimiter:
    def __init__(self, max_requests=10, time_window=60):
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests = defaultdict(list)

    def is_allowed(self, user_id):
        now = time.time()
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if now - req_time < self.time_window
        ]

        if len(self.requests[user_id]) < self.max_requests:
            self.requests[user_id].append(now)
            return True
        return False


rate_limiter = RateLimiter()


async def check_rate_limit(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit"""
    user_id = update.effective_user.id
    if not rate_limiter.is_allowed(user_id):
        await update.message.reply_text(
            "‚ö†Ô∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!**\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π.",
            parse_mode='Markdown'
        )
        return False
    return True


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await check_rate_limit(update):
        return

    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É —á–µ—Ä–µ–∑ API
    player_name = await minecraft_api.get_linked_player(user_id)

    if player_name:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        storage.links[user_id] = player_name
        storage.save_data()

        message = f"""üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!**

‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **{player_name}**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/unlink - –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
    else:
        message = f"""üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤!**

‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.

üéÆ **–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:**
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Minecraft
2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ (–≤–∞—Å –∫–∏–∫–Ω–µ—Ç —Å –∫–æ–¥–æ–º)
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/link –í–ê–®_–ö–û–î`

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏"""

    await update.message.reply_text(message, parse_mode='Markdown')


async def link_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link"""
    if not await check_rate_limit(update):
        return

    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not await minecraft_api.health_check():
        await update.message.reply_text(
            "‚ùå **–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown'
        )
        return

    if not context.args:
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/link –í–ê–®_–ö–û–î`",
            parse_mode='Markdown'
        )
        return

    code = context.args[0].upper().strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    if not code.isalnum() or len(code) != 8:
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!**\n\n–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (8 —Å–∏–º–≤–æ–ª–æ–≤).",
            parse_mode='Markdown'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–≤—è–∑–∫—É
    current_player = await minecraft_api.get_linked_player(user_id)
    if current_player:
        await update.message.reply_text(
            f"‚ö†Ô∏è –í–∞—à Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **{current_player}**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unlink —á—Ç–æ–±—ã –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
            parse_mode='Markdown'
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    checking_msg = await update.message.reply_text("üîÑ **–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥...**", parse_mode='Markdown')

    try:
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API
        result = await minecraft_api.verify_code(code, user_id)

        if result["success"]:
            player_name = result["data"].get("player_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
            storage.links[user_id] = player_name
            storage.save_data()

            await checking_msg.edit_text(f"""‚úÖ **–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!**

üéÆ –í–∞—à Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **{player_name}**

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!""", parse_mode='Markdown')

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø—Ä–∏–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞ {player_name}")

        else:
            error_msg = result.get("data", {}).get("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥")
            await checking_msg.edit_text(f"""‚ùå **{error_msg}**

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: `/link –ù–û–í–´–ô_–ö–û–î`""", parse_mode='Markdown')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        await checking_msg.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown'
        )


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if not await check_rate_limit(update):
        return

    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
    player_name = await minecraft_api.get_linked_player(user_id)

    if player_name:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
        storage.links[user_id] = player_name
        storage.save_data()

        message = f"""‚úÖ **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏: –ê–∫—Ç–∏–≤–Ω–∞**

üéÆ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫: **{player_name}**
üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üîó API: {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if await minecraft_api.health_check() else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"""
    else:
        message = """‚ùå **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω**

üéÆ –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.

–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"""

    await update.message.reply_text(message, parse_mode='Markdown')


async def unlink_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unlink"""
    if not await check_rate_limit(update):
        return

    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    player_name = await minecraft_api.get_linked_player(user_id)

    if not player_name:
        await update.message.reply_text(
            "‚ùå **–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!**",
            parse_mode='Markdown'
        )
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
    if user_id in storage.links:
        del storage.links[user_id]
        storage.save_data()

    await update.message.reply_text(f"""‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**

üéÆ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∏–≥—Ä–æ–∫—É: **{player_name}**

‚ùó –û—Ç–≤—è–∑–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ.
–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω.

‚ö†Ô∏è –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.""", parse_mode='Markdown')

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞ {player_name}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    api_status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if await minecraft_api.health_check() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    message = f"""ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/link –ö–û–î - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–æ–¥—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/unlink - –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç

üéÆ **–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:**
1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
2. –í–∞—Å –∫–∏–∫–Ω–µ—Ç —Å –∫–æ–¥–æ–º –ø—Ä–∏–≤—è–∑–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: `/link –í–ê–®_–ö–û–î`
4. –ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!

‚ö†Ô∏è –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ 10 –º–∏–Ω—É—Ç!

üîó **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:** {api_status}"""

    await update.message.reply_text(message, parse_mode='Markdown')


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

    if isinstance(context.error, Conflict):
        logger.error("Conflict error: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        sys.exit(1)

    if isinstance(context.error, (NetworkError, TimedOut)):
        logger.warning(f"Network error: {context.error}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        return


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    sys.exit(0)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or not BOT_TOKEN:
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        sys.exit(1)

    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("link", link_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("unlink", unlink_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_error_handler(error_handler)

        logger.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üîó Minecraft API: {MINECRAFT_API_URL}")
        logger.info(f"PID: {os.getpid()}")

        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

    except Conflict as e:
        logger.error(f"Conflict error: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        sys.exit(0)
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()