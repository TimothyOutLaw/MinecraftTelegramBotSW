#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import logging
import os
import time
from datetime import datetime
from typing import Dict

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8276621692:AAFiThRGFHypC6y9Rq-Q7roubH4iBZPb9Yk"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
MINECRAFT_SERVER_HOST = "5.83.140.93"  # IP –≤–∞—à–µ–≥–æ Minecraft —Å–µ—Ä–≤–µ—Ä–∞
MINECRAFT_SERVER_PORT = 25575  # RCON –ø–æ—Ä—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
class DataStorage:
    def __init__(self, data_file: str = "bot_data.json"):
        self.data_file = data_file
        self.links: Dict[int, str] = {}  # telegram_id -> minecraft_uuid
        self.pending_codes: Dict[str, Dict] = {}  # code -> {telegram_id, expires_at, player_name}
        self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.links = {int(k): v for k, v in data.get('links', {}).items()}
                    self.pending_codes = data.get('pending_codes', {})
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.links)} –ø—Ä–∏–≤—è–∑–æ–∫ –∏ {len(self.pending_codes)} –∫–æ–¥–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'links': {str(k): v for k, v in self.links.items()},
                'pending_codes': self.pending_codes
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def cleanup_expired_codes(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤"""
        current_time = time.time()
        expired_codes = [
            code for code, data in self.pending_codes.items()
            if data.get('expires_at', 0) < current_time
        ]

        for code in expired_codes:
            del self.pending_codes[code]

        if expired_codes:
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_codes)} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤")
            self.save_data()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = DataStorage()


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    storage.cleanup_expired_codes()

    if user_id in storage.links:
        player_name = storage.links[user_id]
        message = f"""üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!**

‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **{player_name}**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/unlink - –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
    else:
        message = f"""üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤!**

‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.

üéÆ **–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:**
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä Minecraft
2. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ (–≤–∞—Å –∫–∏–∫–Ω–µ—Ç —Å –∫–æ–¥–æ–º)
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/link –í–ê–®_–ö–û–î`

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏"""

    await update.message.reply_text(message, parse_mode='Markdown')


async def link_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if not context.args:
        await update.message.reply_text(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/link –í–ê–®_–ö–û–î`",
            parse_mode='Markdown'
        )
        return

    code = context.args[0].upper()

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    storage.cleanup_expired_codes()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
    if user_id in storage.links:
        player_name = storage.links[user_id]
        await update.message.reply_text(
            f"‚ö†Ô∏è –í–∞—à Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **{player_name}**",
            parse_mode='Markdown'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if code not in storage.pending_codes:
        await update.message.reply_text("""‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥!**

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: `/link –ù–û–í–´–ô_–ö–û–î`""", parse_mode='Markdown')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
    code_data = storage.pending_codes[code]
    if time.time() > code_data.get('expires_at', 0):
        del storage.pending_codes[code]
        storage.save_data()

        await update.message.reply_text("""‚è∞ **–ö–æ–¥ –∏—Å—Ç–µ–∫!**

üîÑ –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥:
1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞
2. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: `/link –ù–û–í–´–ô_–ö–û–î`""", parse_mode='Markdown')
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
    player_name = code_data.get('player_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    player_uuid = code_data.get('player_uuid', '')

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    old_user_id = None
    for tid, pname in storage.links.items():
        if pname == player_name:
            old_user_id = tid
            break

    if old_user_id:
        del storage.links[old_user_id]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—è–∑–∫—É
    storage.links[user_id] = player_name
    del storage.pending_codes[code]
    storage.save_data()

    await update.message.reply_text(f"""‚úÖ **–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞!**

üéÆ –í–∞—à Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É: **{player_name}**

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä!""", parse_mode='Markdown')

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –ø—Ä–∏–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞ {player_name}")


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    storage.cleanup_expired_codes()

    if user_id in storage.links:
        player_name = storage.links[user_id]
        message = f"""‚úÖ **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏: –ê–∫—Ç–∏–≤–Ω–∞**

üéÆ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫: **{player_name}**
üïê –ü—Ä–∏–≤—è–∑–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y')}"""
    else:
        message = """‚ùå **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω**

üéÆ –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.

–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"""

    await update.message.reply_text(message, parse_mode='Markdown')


async def unlink_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unlink"""
    user_id = update.effective_user.id

    if user_id not in storage.links:
        await update.message.reply_text(
            "‚ùå **–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!**",
            parse_mode='Markdown'
        )
        return

    player_name = storage.links[user_id]
    del storage.links[user_id]
    storage.save_data()

    await update.message.reply_text(f"""‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!**

üéÆ –û—Ç–≤—è–∑–∞–Ω –∏–≥—Ä–æ–∫: **{player_name}**

‚ö†Ô∏è –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.""", parse_mode='Markdown')

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞ {player_name}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    message = """ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/link –ö–û–î - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–æ–¥—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤—è–∑–∫–∏
/unlink - –æ—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç

üéÆ **–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:**
1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
2. –í–∞—Å –∫–∏–∫–Ω–µ—Ç —Å –∫–æ–¥–æ–º –ø—Ä–∏–≤—è–∑–∫–∏
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: `/link –í–ê–®_–ö–û–î`
4. –ó–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!

‚ö†Ô∏è –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã —Ç–æ–ª—å–∫–æ 10 –º–∏–Ω—É—Ç!"""

    await update.message.reply_text(message, parse_mode='Markdown')


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    await update.message.reply_text("""‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.""", parse_mode='Markdown')


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("link", link_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("unlink", unlink_command))
    application.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()